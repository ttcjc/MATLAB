%% Probe Mesh Generator v1.3
% ----
% Generate Uniform Point Clouds To Serve as Sampling Points in OpenFOAM v7 Simulations


%% Preamble

run preamble;

disp('=========================');
disp('Probe Mesh Generator v1.3');
disp('=========================');

disp(' ');
disp(' ');


%% Changelog

% v1.0 - Initial Commit, Combining Functionality of 'surfaceMeshGenerator' and 'volumeMeshGenerator'
% v1.1 - Minor Alterations to Align Volume Mesh With That Generated by â€˜volumeFieldGenerator'
% v1.2 - Minor Formatting Updates
% v1.3 - Added Support for Full-Scale Windsor Model Simulations


%% Supported OpenFOAM Case Types

% Run_Test
% Windsor_Upstream
% Windsor_fullScale


%% Select Mesh Format

disp('Mesh Format');
disp('------------');

disp(' ');

disp('Compatible Mesh Formats:');
disp('    A: Base Surface Mesh');
disp('    B: Wake Volume Mesh');
disp('    C: Underbody Volume Mesh');

valid = false;
while ~valid
    disp(' ');
    selection = input('Select Data Format [A/B]: ', 's');

    if selection == 'a' | selection == 'A' %#ok<OR2>
        format = 'A';
        valid = true;
    elseif selection == 'b' | selection == 'B' %#ok<OR2>
        format = 'B';
        valid = true;
    elseif selection == 'c' | selection == 'C' %#ok<OR2>
        format = 'C';
        valid = true;
    else
        disp('    WARNING: Invalid Entry');
    end

end

disp(' ');
disp(' ');


%% Select Type Case

disp('Case Type Selection');
disp('--------------------');

caseTypes = {
             'Run_Test'
             'Windsor_SB_wW_Upstream'
             'Windsor_ST_wW_Upstream'
             'Windsor_RSST_wW_Upstream'
             'Windsor_SB_fullScale'
            };

valid = false;
while ~valid
    [index, valid] = listdlg('listSize', [300, 300], ...
                             'selectionMode', 'single', ...
                             'name', 'Select Case Type', ...
                             'listString', caseTypes);
    
    if ~valid
        disp('WARNING: No Case Type Selected');
    end
    
end

caseType = caseTypes{index};

disp(' ');

disp(['Case: ', caseType]);

disp(' ');
disp(' ');

%% Select Relevant Geometry and Define Bounding Box

[geometry, xDims, yDims, zDims, precision, normLength] = selectGeometry(geoLoc);

disp(' ');
disp(' ');


%% Delete Previously Generated Meshes

switch format

    case 'A'
        
        % Target Spatial Resolution of Probe Mesh [m]
        if contains(caseType, 'Run_Test') || (contains(caseType, 'Windsor') && contains(caseType, 'Upstream'))
            cellSize = 8e-3;
        elseif contains(caseType, 'Windsor') && contains(caseType, 'fullScale')
            cellSize = 32e-3;
        end
        
        if exist(['Output/Files/baseMesh_', caseType, '_', num2str(cellSize * 1e3), 'mm'], 'file')
            delete(['Output/Files/baseMesh_', caseType, '_', num2str(cellSize * 1e3), 'mm']);
        end

    case 'B'
        
        % Target Spatial Resolution of Probe Mesh [m]
        if contains(caseType, 'Run_Test') || (contains(caseType, 'Windsor') && contains(caseType, 'Upstream'))
            cellSize = 8e-3;
        elseif contains(caseType, 'Windsor') && contains(caseType, 'fullScale')
            cellSize = 32e-3;
        end
        
        if exist(['Output/Files/wakeMesh_', caseType, '_', num2str(cellSize * 1e3), 'mm'], 'file')
            delete(['Output/Files/wakeMesh_', caseType, '_', num2str(cellSize * 1e3), 'mm']);
        end
        
    case 'C'
        
        % Target Spatial Resolution of Probe Mesh [m]
        if contains(caseType, 'Run_Test') || (contains(caseType, 'Windsor') && contains(caseType, 'Upstream'))
            cellSize = 8e-3;
        elseif contains(caseType, 'Windsor') && contains(caseType, 'fullScale')
            cellSize = 32e-3;
        end
        
        if exist(['Output/Files/underbodyMesh_', caseType, '_', num2str(cellSize * 1e3), 'mm'], 'file')
            delete(['Output/Files/underbodyMesh_', caseType, '_', num2str(cellSize * 1e3), 'mm']);
        end

end


%% Mesh Generation

disp('Mesh Generation');
disp('----------------');

disp(' ');

disp('***********');
disp('  Running  ');

tic;

disp(' ');

disp('    Initialising...');

switch format

    case 'A'
        
        % Identify Model Base
        parts = fieldnames(geometry);
        for i = 1:height(parts)
            
            if max(geometry.(parts{i}).vertices(:,1)) == xDims(2)
                break;
            end
            
            if i == height(parts)
                error('Mismatch Between ''xDims'' and Geometry Bounding Box')
            end
            
        end
    
        geoPoints = geometry.(parts{i}).vertices;
        basePoints = geoPoints((geoPoints(:,1) == xDims(2)),:);
        
        basePerim = boundary(basePoints(:,2), basePoints(:,3), 0.95);
        basePerim = basePoints(basePerim,:);
        basePoly = polyshape(basePerim(:,2), basePerim(:,3), 'keepCollinearPoints', true);
        basePoly = polybuffer(basePoly, -0.0025, 'jointType', 'square');
        basePerim = ones(height(basePoly.Vertices),3) * basePerim(1,1);
        basePerim(:,[2,3]) = basePoly.Vertices(:,[1,2]);

        if ~all(basePerim(1,:) == basePerim(end,:))
            basePerim = [basePerim; basePerim(1,:)]; % Close Boundary
        end
        
        % Define Mesh Boundaries
        xLims = round(xDims(2), precision);
        yLims = [min(basePerim(:,2)); max(basePerim(:,2))];
        zLims = [min(basePerim(:,3)); max(basePerim(:,3))];
                
        % Adjust Uniform Cell Size to Fit Region of Interest
        cellSizeX = cellSize;
        cellSizeY = (yLims(2) - yLims(1)) / round((yLims(2) - yLims(1)) / cellSize);
        cellSizeZ = (zLims(2) - zLims(1)) / round((zLims(2) - zLims(1)) / cellSize);
        
        disp(' ');

        % Generate Mesh
        disp('    Generating Initial Surface Mesh...');

        % Generate Initial Mesh
        [y, z] = ndgrid(yLims(1):cellSizeY:yLims(2), zLims(1):cellSizeZ:zLims(2));

        % Convert Mesh to Readable Format        
        meshPoints = zeros(height(y(:)),3);
        meshPoints(:,1) = xLims + 1e-6; % Offset to Prevent Base Intersection
        meshPoints(:,(2:3)) = [y(:), z(:)];

        disp(' ');
        
        % Adhere Mesh to Base Boundaries
        disp('    Adhering Mesh to Base Boundaries...');
        
        [indexIn, indexOn] = inpolygon(meshPoints(:,2), meshPoints(:,3), basePerim(:,2), basePerim(:,3));
        indexBase = find(or(indexIn, indexOn));
        meshPoints = meshPoints(indexBase,:);
        
        disp(' ');

        % Write Mesh
        disp('    Writing Mesh Data...');

        fileID = fopen(['~/MATLAB/Output/Files/baseMesh_', caseType, '_', num2str(cellSize * 1e3), 'mm'], 'w');
        precision = num2str(precision);
        formatSpec = ['                (%.', precision, 'f %.', precision, 'f %.', precision, 'f)\n'];
        
        for i = 1:height(meshPoints)
            fprintf(fileID, formatSpec, meshPoints(i,1), meshPoints(i,2), meshPoints(i,3));
        end
        
        fclose(fileID);
        
        disp(' ');
        
        disp(['    Mesh Written to: ~/MATLAB/Output/Files/baseMesh_', caseType, '_', num2str(cellSize * 1e3), 'mm']);
    
    case 'B'
        
        % Define Mesh Boundaries
        if contains(caseType, 'Run_Test') || (contains(caseType, 'Windsor') && contains(caseType, 'Upstream'))
            xLims = [0.31875; 2.57125] - 1.325; % 2L
            yLims = [-0.522; 0.522];
            zLims = [cellSize; 0.6264];
        elseif contains(caseType, 'Windsor') && contains(caseType, 'fullScale')
            xLims = [1.275; 14.461]; % 3L
            yLims = [-2.9232; 2.9232];
            zLims = [cellSize; 2.9232];
        end
        
        disp(' ');
        
        % Adjust Uniform Cell Size to Fit Region of Interest
        cellSizeX = (xLims(2) - xLims(1)) / round((xLims(2) - xLims(1)) / cellSize);
        cellSizeY = (yLims(2) - yLims(1)) / round((yLims(2) - yLims(1)) / cellSize);
        cellSizeZ = (zLims(2) - zLims(1)) / round((zLims(2) - zLims(1)) / cellSize);

        % Generate Initial Mesh
        disp('    Generating Initial Volume Mesh...');

        [x, y, z] = ndgrid(xLims(1):cellSizeX:xLims(2), ...
                           yLims(1):cellSizeY:yLims(2), ...
                           zLims(1):cellSizeZ:zLims(2));
        
        % Convert Mesh to Readable Format
        meshPoints = [x(:), y(:), z(:)];
        
        disp(' ');
        
        % Remove Mesh Points Intersecting Geometry
        disp('    Removing Mesh Points Intersecting Geometry...');
        
        parts = fieldnames(geometry);
        for i = 1:height(parts)
            geoPoints = unique(geometry.(parts{i}).vertices, 'rows');
            DT = delaunay(geoPoints);
            
            index = ~isnan(tsearchn(geoPoints, DT, meshPoints));
            
            meshPoints(index,:) = [];
        end

        disp(' ');
        
        % Write Mesh
        disp('    Writing Mesh Data...');
        
        fileID = fopen(['~/MATLAB/Output/Files/wakeMesh_', caseType, '_', num2str(cellSize * 1e3), 'mm'], 'w');
        precision = num2str(precision);
        formatSpec = ['                (%.', precision, 'f %.', precision, 'f %.', precision, 'f)\n'];
        
        for i = 1:height(meshPoints)
            fprintf(fileID, formatSpec, meshPoints(i,1), meshPoints(i,2), meshPoints(i,3));
        end
        
        fclose(fileID);

        disp(' ');
        
        disp(['    Mesh Written to: ~/MATLAB/Output/Files/wakeMesh_', caseType, '_', num2str(cellSize * 1e3), 'mm']);

    case 'C'
        
        % Define Mesh Boundaries
        if contains(caseType, 'Run_Test') || (contains(caseType, 'Windsor') && contains(caseType, 'Upstream'))
            xLims = [0.31875; 2.57125] - 1.325; % 2L
            yLims = [-0.522; 0.522];
            zLims = [cellSize; 0.6264];
        elseif contains(caseType, 'Windsor') && contains(caseType, 'fullScale')
            xLims = [1.275; 14.461]; % 3L
            yLims = [-2.9232; 2.9232];
            zLims = [cellSize; 2.9232];
        end
        
        disp(' ');
        
        % Adjust Uniform Cell Size to Fit Region of Interest
        cellSizeX = (xLims(2) - xLims(1)) / round((xLims(2) - xLims(1)) / cellSize);
        cellSizeY = (yLims(2) - yLims(1)) / round((yLims(2) - yLims(1)) / cellSize);
        cellSizeZ = (zLims(2) - zLims(1)) / round((zLims(2) - zLims(1)) / cellSize);

        % Generate Initial Mesh
        disp('    Generating Initial Volume Mesh...');

        [x, y, z] = ndgrid(xLims(1):cellSizeX:xLims(2), ...
                           yLims(1):cellSizeY:yLims(2), ...
                           zLims(1):cellSizeZ:zLims(2));
        
        % Convert Mesh to Readable Format
        meshPoints = [x(:), y(:), z(:)];
        
        % Shift Mesh to Underbody Region
        if contains(caseType, 'Run_Test') || (contains(caseType, 'Windsor') && contains(caseType, 'Upstream'))
            meshPoints(:,1) = meshPoints(:,1) - (max(meshPoints(:,1)) - min(meshPoints(:,1)));
            
            meshPoints = meshPoints((meshPoints(:,3) < 0.18),:);
            meshPoints = meshPoints((meshPoints(:,2) > -0.3),:);
            meshPoints = meshPoints((meshPoints(:,2) < 0.3),:);
            meshPoints = meshPoints((meshPoints(:,1) < -1.01025),:);
            meshPoints = meshPoints((meshPoints(:,1) > xDims(1)),:);
        elseif contains(caseType, 'Windsor') && contains(caseType, 'fullScale')
            meshPoints(:,1) = meshPoints(:,1) - (max(meshPoints(:,1)) - min(meshPoints(:,1)));

            meshPoints = meshPoints((meshPoints(:,3) < 0.78),:);
            meshPoints = meshPoints((meshPoints(:,2) > -1.51),:);
            meshPoints = meshPoints((meshPoints(:,2) < 1.51),:);
            meshPoints = meshPoints((meshPoints(:,1) < 1.2595),:);
            meshPoints = meshPoints((meshPoints(:,1) > xDims(1)),:);
        end
        
        disp(' ');
        
        % Remove Mesh Points Intersecting Geometry
        disp('    Removing Mesh Points Intersecting Geometry...');
        
        parts = fieldnames(geometry);
        for i = 1:height(parts)
            geoPoints = unique(geometry.(parts{i}).vertices, 'rows');
            DT = delaunay(geoPoints);
            
            index = ~isnan(tsearchn(geoPoints, DT, meshPoints));
            
            meshPoints(index,:) = [];
        end

        disp(' ');
        
        % Write Mesh
        disp('    Writing Mesh Data...');
        
        fileID = fopen(['~/MATLAB/Output/Files/underbodyMesh_', caseType, '_', num2str(cellSize * 1e3), 'mm'], 'w');
        precision = num2str(precision);
        formatSpec = ['                (%.', precision, 'f %.', precision, 'f %.', precision, 'f)\n'];
        
        for i = 1:height(meshPoints)
            fprintf(fileID, formatSpec, meshPoints(i,1), meshPoints(i,2), meshPoints(i,3));
        end
        
        fclose(fileID);

        disp(' ');
        
        disp(['    Mesh Written to: ~/MATLAB/Output/Files/underbodyMesh_', caseType, '_', num2str(cellSize * 1e3), 'mm']);
        
end
executionTime = toc;

disp(' ');

disp(['    Execution Time: ', num2str(executionTime), 's']);

disp(' ');

disp('  Success  ');
disp('***********');


%% Visualisation

% Initialise Figure
fig = fig + 1;
set(figure(fig), 'name', 'Probe Visualisation', 'color', [1, 1, 1], ...
                 'outerPosition', [25, 25, 650, 650], 'units', 'pixels')
set(gca, 'positionConstraint', 'outerPosition', 'dataAspectRatio', [1, 1, 1], ...
         'lineWidth', 2, 'fontName', 'LM Mono 12', 'fontSize', 16, 'layer', 'top');
lighting gouraud;
hold on;

% Plot Geometry
parts = fieldnames(geometry);

for i = 1:height(parts)
    patch('faces', geometry.(parts{i}).faces, ...
          'vertices', geometry.(parts{i}).vertices, ...
          'faceColor', [0.5, 0.5, 0.5], ...
          'edgeColor', [0.5, 0.5, 0.5], ...
          'lineStyle', 'none');
end
clear i;

% Plot Probe Points
scatter3(meshPoints(:,1), meshPoints(:,2), meshPoints(:,3), 10, ([230, 0, 126] / 255), 'filled');

% Figure Formatting
lightangle(90, 45);
lighting gouraud;
axis off;
box off;
view([30, 30]); % 3D
axis padded;
hold off;